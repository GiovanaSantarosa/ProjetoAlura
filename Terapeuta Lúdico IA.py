%pip install google-genai
import os
from google.colab import userdata
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
from google import genai

client = genai.Client()
modelo = "gemini-1.5-pro-latest"
%pip install -q google-adk
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteÃºdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saÃ­da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisiÃ§Ãµes HTTP
import warnings

warnings.filterwarnings("ignore")
# FunÃ§Ã£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviÃ§o de sessÃ£o em memÃ³ria
    session_service = InMemorySessionService()
    # Cria uma nova sessÃ£o (vocÃª pode personalizar os IDs conforme necessÃ¡rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteÃºdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execuÃ§Ã£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response
    # FunÃ§Ã£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('â€¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))
  # Agente de brainstorm

def agente_brainstormer(objetivo, idade, interesse):
    brainstormer = Agent(
        name="Brainstormer",
        model = "gemini-1.5-pro-latest",
        instruction ="""
        VocÃª terÃ¡ a responsabilidade de receber a o obetivo terapÃªutico(o que o fonoaudiÃ³logo quer produzir
        para ajudar a fala da crianÃ§a), a idade da crianÃ§a e os interesses da mesma. Com estas informaÃ§Ãµes
        vocÃª deve fazer uma pesquisa no Google com a ferramenta {google_search} sobre atividades que possam
        ajudar o profisional a ajudar a crianÃ§a mantendo seu interesse, achando atividades que devem
        ser filtradas por relevÃ¢ncia, um artivo pouco relevante sobre o assunto pode ser ineficÃ¡z e apenas
        atrapalharÃ¡ a pesquisa.
        """,
        description = "Agente que busca as ideias de atividades",
        tools = [google_search]
    )
    saida_brainstormer = f"Objetivo terapÃªutico: {objetivo}\nIdade: {idade}\nInteresses: {interesse}"
    ideias_geradas = call_agent(brainstormer, saida_brainstormer)
    return ideias_geradas
    # Agente de anÃ¡lise

def agente_curator(objetivo, idade, interesse, ideias_geradas):
    curator = Agent(
        name ="Curator",
        model = "gemini-1.5-pro-latest",
        instruction ="""
        VocÃª terÃ¡ a responsabilidade de analisar a lista de ideias geradas pelo "Brainstormer", avaliando a
        relevÃ¢ncia da atividade de acordo com o objetivo desejado, a idade da crianÃ§a e os interesses da 
        mesma. Certificando que as ideias selecionadas sÃ£o adequadas para a idade da crianÃ§a e promissoras.
        Deve organiza-las, dando informaÃ§Ãµes importantes sobre a atividade para que esta possa ser 
        posteriormentedetalhadas e apresentadas.
        """,
        description = "Agente que organiza as ideias de atividades",
        tools = [google_search]
    )
    saida_curator = f"Objetivo terapÃªutico: {objetivo}\nIdade: {idade}\nInteresses: {interesse}\nIdeias geradas: {ideias_geradas}"
    ideias_organizadas = call_agent(curator, saida_curator)
    return ideias_organizadas
    # Agente de planejamento

def agente_planner(objetivo, idade, interesse, ideias_organizadas):
    planner = Agent(
        name ="Planner",
        model = "gemini-1.5-pro-latest",
        instruction ="""
        VocÃª terÃ¡ a responsabilidade de pegar as ideias organizadas pelo "curator" e a partir delas criar
        um plano de atividades detalhado. IncluÃ­ndo material utilizado, tempo mÃ©dio da atividade, passo a
        passo para como o fonoaudiÃ³logo pode desenvolver e "jogar" a atividade para ajudar a crianÃ§a.
        """,
        description = "Agente que detalha as atividades em um plano prÃ¡tico"
    )
    saida_planner = f"Objetivo terapÃªutico: {objetivo}\nIdade: {idade}\nInteresses: {interesse}\nIdeias organizadas: {ideias_organizadas}"
    plano_de_atividades = call_agent(planner, saida_planner)
    return plano_de_atividades
    # Agente de revisÃ£o

def agente_reviewer(objetivo, idade, interesse, ideias_organizadas):
    reviewer = Agent(
        name ="Reviewer",
        model = "gemini-1.5-pro-latest",
        instruction ="""
        VocÃª terÃ¡ a responsabilidade de analisar o plano de atividades gerado pelo "Planner" para garantir
        que ele esteja no tom adequado para um profissional de fonoaudiologia, que a linguagem seja clara e
        profissional, e que a atividade seja eficaz para ajudar a crianÃ§a na situaÃ§Ã£o problema, corrigindo
        erros ortogrÃ¡ficos e gramÃ¡ticos. O "Reviewer" tambÃ©m pode identificar possÃ­veis melhorias ou pontos
        a serem clarificados.
        """,
        description = "Agente que analiza a atividade gerada pelo plannar e corrige possÃ­veis erros"
    )
    saida_reviewer = f"Objetivo terapÃªutico: {objetivo}\nIdade: {idade}\nInteresses: {interesse}\nIdeias organizadas: {ideias_organizadas}"
    plano_revisado = call_agent(reviewer, saida_reviewer)
    return plano_revisado
    print("ğŸš€ Iniciando o Sistema de Terapeuta LÃºdico IA com 4 Agentes ğŸš€")
# --- Obter o TÃ³pico do UsuÃ¡rio ---
objetivo = input("Digite o objetivo da atividade: ")
idade = input("Digite a idade da crianÃ§a: ")
interesse = input("Digite os interesses da crianÃ§a: ")


# Inserir lÃ³gica do sistema de agentes ################################################
if not objetivo:
  print("Por favor, insira um tÃ³pico vÃ¡lido.")
else:
  print(f"Vamos trabalhar sobre este tÃ³pico: {objetivo} ")

  atividades = agente_brainstormer(objetivo, idade, interesse)
  print("resultado do agente buscador")
  display(to_markdown(atividades))
  print("------------------------------")